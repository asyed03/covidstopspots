{"version":3,"sources":["firebase.js","SearchBar.js","CovidPoint.js","LocationMarkers.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","SearchBar","props","state","inputValue","Geocode","setApiKey","process","setLanguage","setLocationType","type","onChange","event","setState","target","value","onKeyPress","key","fromAddress","then","response","results","geometry","location","lat","lng","console","log","changePos","error","React","CovidPoint","GetType","icon","input","Marker","position","Popup","size","variant","placeholder","ev","name","information","colorScheme","onClick","pushPoint","this","covidIcon","L","iconUrl","iconSize","popupAnchor","OnChange","Component","LocationMarkers","useState","setPosition","useMapEvents","dblclick","latlng","newPoints","points","push","fetchPoints","App","pos","zoom","map","flyTo","className","id","MapContainer","center","scrollWheelZoom","whenCreated","style","height","TileLayer","attribution","url","length","point","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.094871b0.chunk.js","sourcesContent":["import firebase from 'firebase'\r\nimport \"firebase/auth\"\r\nimport \"firebase/database\"\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAA-S_37BYtqpH-IKz0glxwUB8-MAhK2jo\",\r\n    authDomain: \"covidstopspots.firebaseapp.com\",\r\n    databaseURL: \"https://covidstopspots-default-rtdb.firebaseio.com\",\r\n    projectId: \"covidstopspots\",\r\n    storageBucket: \"covidstopspots.appspot.com\",\r\n    messagingSenderId: \"452942963425\",\r\n    appId: \"1:452942963425:web:d83e8ab33e86346c5ecda0\",\r\n    measurementId: \"G-VP83E9BKQ5\"\r\n  };\r\n\r\n  var fire = firebase.initializeApp(firebaseConfig);\r\n\r\n  export const auth = firebase.auth();\r\n  \r\n  export default fire;","import './SearchBar.css';\r\nimport * as React from \"react\";\r\nimport Geocode from \"react-geocode\";\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      inputValue: \"\",\r\n    }\r\n    Geocode.setApiKey(`${process.env.REACT_APP_GEOCODE_API}`);\r\n    Geocode.setLanguage(\"en\");\r\n    Geocode.setLocationType(\"ROOFTOP\");\r\n  }\r\n  \r\n\r\n  render () {\r\n    return (\r\n            <div>\r\n              Type Address: <input type= \"text\" onChange={event => {this.setState({inputValue: event.target.value})}} onKeyPress={event => {\r\n                if (event.key === 'Enter' && this.state.inputValue != \"\") {\r\n                  Geocode.fromAddress(this.state.inputValue).then(\r\n                    (response) => {\r\n                      const { lat, lng } = response.results[0].geometry.location;\r\n                      console.log(lat, lng);\r\n                      this.props.changePos([lat, lng], 14);\r\n                    },\r\n                    (error) => {\r\n                      console.error(error);\r\n                    }\r\n                  );\r\n                }\r\n              }}></input>\r\n              </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport firebase from './firebase';\r\nimport { Marker, Popup } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport { ChakraProvider, Button, Input} from \"@chakra-ui/react\";\r\n\r\nclass CovidPoint extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      position: this.props.position,\r\n      name: this.props.name,\r\n      input: this.props.input,\r\n      information: this.props.information,\r\n      key: this.props.key\r\n    };\r\n  }\r\n\r\n  pushPoint(){\r\n    //push to the database\r\n    this.setState({input: false})\r\n    {/*\r\n    const pointsref = firebase.database().ref(\"points\")\r\n    const newPointref = pointsref.push()\r\n    newPointref.set({\r\n      position: this.state.position,\r\n      name: this.state.name,\r\n      input: this.state.input,\r\n      information: this.state.information,  \r\n    })\r\n    console.log(\"pushed to db\", this.state.name)\r\n    \r\n    */} \r\n  }\r\n\r\n  GetType = (icon) => {\r\n    if (this.state.input === true){\r\n      return (\r\n        console.log(\"input point\"),\r\n        <Marker position={this.state.position} icon={icon}>\r\n            <Popup>\r\n              Name: <Input size=\"sm\" variant=\"outline\" placeholder=\"Name\" onChange={ev => {this.setState({name: ev.target.value})}}/> <br />\r\n              Case Status: <Input size=\"sm\" variant=\"outline\" placeholder=\"Case Status\"  onChange={ev => {this.setState({information: ev.target.value})}}/> <br />\r\n              <Button size = \"xs\" variant=\"solid\" colorScheme=\"twitter\" onClick={ev => {\r\n                if (this.state.name != \"\" && this.state.information != \"\"){\r\n                  this.pushPoint();\r\n                } }}> Submit </Button>\r\n            </Popup>\r\n        </Marker>\r\n      )\r\n    }\r\n    return (\r\n      console.log(\"normal point\"),\r\n      <Marker position={this.props.position} icon={icon}>\r\n            <Popup>\r\n              Name: {this.state.name} <br />\r\n              position: {this.state.position} <br />\r\n              Case Status: {this.state.information}\r\n            </Popup>\r\n      </Marker>\r\n    )\r\n    \r\n  }\r\n\r\n  render() {\r\n    const covidIcon = L.icon({\r\n      iconUrl:\r\n        \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Redpoint.svg/768px-Redpoint.svg.png\",\r\n\r\n      iconSize: [30, 30], // size of the icon\r\n      popupAnchor: [0, 0] // point from which the popup should open relative to the iconAnchor\r\n    });\r\n\r\n    return (\r\n      <ChakraProvider>\r\n        <div OnChange>\r\n        {this.GetType(covidIcon)}\r\n        </div>\r\n      </ChakraProvider>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default CovidPoint;\r\n","import { useState } from \"react\";\r\nimport { useMapEvents } from \"react-leaflet\";\r\nimport CovidPoint from \"./CovidPoint\";\r\n\r\nfunction LocationMarkers(props) {\r\n  const [position, setPosition] = useState([]);\r\n  useMapEvents({\r\n    dblclick(ev) {\r\n      console.log(\"double clicked\");\r\n      const { lat, lng } = ev.latlng;\r\n      setPosition([lat, lng]);\r\n      const newPoints = [...props.points];\r\n      console.log(newPoints);\r\n      newPoints.push(<CovidPoint\r\n        position={[lat, lng]}\r\n        name=\"test\"\r\n        information=\"test\"\r\n        input = {true}\r\n      ></CovidPoint>);\r\n      props.fetchPoints(newPoints);\r\n    }\r\n  });\r\n\r\n  return null;\r\n\r\n}\r\n\r\nexport default LocationMarkers;\r\n","import './App.css';\r\nimport * as React from \"react\";\r\nimport firebase from \"./firebase\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents, useMap } from 'react-leaflet'\r\nimport 'leaflet/dist/leaflet.css'\r\nimport * as L from 'leaflet';\r\nimport SearchBar from './SearchBar';\r\nimport CovidPoint from './CovidPoint';\r\nimport LocationMarkers from './LocationMarkers';\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      map: null,\r\n      points: [<CovidPoint\r\n      position={[43.653226, -79.3831843]}\r\n      name=\"point1\"\r\n      information=\"random point\"\r\n      input = {false}\r\n    ></CovidPoint>]\r\n    }\r\n  }\r\n\r\n  changePos = (pos, zoom) => {\r\n    const {map} = this.state;\r\n    if (map) map.flyTo(pos, zoom);\r\n  }\r\n\r\n  fetchPoints = (newPoints) => {\r\n    // fetch info from database\r\n    this.setState({points: newPoints})\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"page loaded!\")\r\n }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div id=\"title\">\r\n          <h1>CovidStopSpots</h1>\r\n          <p>A responsive tracker for Covid-19.</p>\r\n        </div>\r\n        <div id=\"map\">\r\n          <MapContainer\r\n            id=\"1\"\r\n            center={[43.653226, -79.3831843]}\r\n            zoom={13}\r\n            scrollWheelZoom={false}\r\n            whenCreated={(map) => this.setState({ map })}\r\n            style={{ height: \"100vh \" }}\r\n          >\r\n            <TileLayer\r\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            {this.state.points.length > 0 && this.state.points.map(\r\n      (point, index) => {\r\n        <li key={index}></li>\r\n        return point\r\n      }) }\r\n            {/* <CovidPoint\r\n              position={[43.653226, -79.3831843]}\r\n              name=\"point1\"\r\n              information=\"random point\"\r\n            ></CovidPoint>\r\n            <CovidPoint\r\n              position={[50.653226, -79.3831843]}\r\n              name=\"point2\"\r\n              information=\"random point\"\r\n            ></CovidPoint> */}\r\n            <LocationMarkers points={this.state.points} fetchPoints={this.fetchPoints}></LocationMarkers>\r\n            <div id=\"searchbar\">\r\n            <SearchBar changePos={this.changePos}/>\r\n            </div>\r\n          </MapContainer>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}